import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";

interface LabRecord {
  $id: string;
  labName?: string;
  labContact?: string;
  timestamp?: string;
  testReportUrl?: string;
  patientName?: string;
  patientEmail?: string;
  patientPhone?: string;
}

interface MedicineRecord {
  $id: string;
  timestamp?: string;
  temperature?: string;
  bp?: string;
  diagnose?: string;
  dosage?: string;
  testRecommended?: string;
  doctorName?: string;
  doctorContact?: string;
  medicine?: string;
  frequency?: string;
}

export async function generateMedicalHistoryPDF({
  userId,
  labRecords,
  medicineRecords,
  logoUrl, // e.g. "/assets/icons/logo-full.png"
}: {
  userId: string;
  labRecords: LabRecord[];
  medicineRecords: MedicineRecord[];
  logoUrl?: string;
}) {
  const doc = new jsPDF();

  // Logo (optional)
  if (logoUrl) {
    try {
      const res = await fetch(logoUrl);
      const blob = await res.blob();
      const reader = new FileReader();
      const logoBase64: string = await new Promise((resolve, reject) => {
        reader.onloadend = () => resolve(reader.result as string);
        reader.onerror = reject;
        reader.readAsDataURL(blob);
      });
      doc.addImage(logoBase64, "PNG", 80, 10, 50, 50);
    } catch {}
  }

  // Get patient info from first lab record, fallback to N/A
  const patientName = labRecords[0]?.patientName || "N/A";
  const patientEmail = labRecords[0]?.patientEmail || "N/A";
  const patientPhone = labRecords[0]?.patientPhone || "N/A";

  // Title
  doc.setFont("Helvetica", "bold");
  doc.setFontSize(18);
  doc.text("Patient Medical History", 105, 70, { align: "center" });

  // Patient Info
  doc.setFontSize(12);
  doc.setFont("Helvetica", "normal");
  autoTable(doc, {
    startY: 80,
    head: [["Patient Information"]],
    body: [
      ["User ID", userId],
      ["Name", patientName],
      ["Email", patientEmail],
      ["Phone", patientPhone],
    ],
    theme: "grid",
    styles: { fontSize: 11, cellPadding: 3 },
    headStyles: { fillColor: [63, 81, 181], halign: "center", textColor: 255 },
  });

  // Lab Records Section
  autoTable(doc, {
    startY: (doc.lastAutoTable?.finalY ?? 100) + 12,
    head: [["Lab Name", "Contact", "Date", "Report"]],
    body: labRecords.length
      ? labRecords.map((rec) => [
          rec.labName || "—",
          rec.labContact || "—",
          rec.timestamp ? new Date(rec.timestamp).toLocaleString() : "—",
          rec.testReportUrl ? "Available" : "—",
        ])
      : [["No lab records found", "", "", ""]],
    theme: "grid",
    styles: { fontSize: 11, cellPadding: 3 },
    headStyles: { fillColor: [33, 150, 243], halign: "center", textColor: 255 },
  });

  // Medicine Records Section
  autoTable(doc, {
    startY: (doc.lastAutoTable?.finalY ?? 130) + 12,
    head: [["Date", "Doctor", "Contact", "Diagnose", "Dosage", "Medicine", "Frequency", "Test Recommended", "Temp", "BP"]],
    body: medicineRecords.length
      ? medicineRecords.map((rec) => [
          rec.timestamp ? new Date(rec.timestamp).toLocaleString() : "—",
          rec.doctorName || "—",
          rec.doctorContact || "—",
          rec.diagnose || "—",
          rec.dosage || "—",
          rec.medicine || "—",
          rec.frequency || "—",
          rec.testRecommended || "—",
          rec.temperature || "—",
          rec.bp || "—",
        ])
      : [["No medicine records found", "", "", "", "", "", "", "", "", ""]],
    theme: "grid",
    styles: { fontSize: 10, cellPadding: 2 },
    headStyles: { fillColor: [76, 175, 80], halign: "center", textColor: 255 },
  });

  // Footer
  doc.setFontSize(10);
  doc.text("Generated by ArogyaCompass", 105, 290, { align: "center" });

  // Trigger download
  doc.save(`MedicalHistory-${patientName.replace(/\s+/g, "_") || userId}.pdf`);
}
