// lib/utils/generateMedicalPDF.ts
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";
import fs from "fs";
import path from "path";

// You must use a base64 version of your logo for jsPDF to embed it
// Adjust this if you're not using next/image

export const generateMedicalPDF = async ({
  userId,
  doctorName,
  doctorContact,
  diagnose,
  testRecommended,
  timestamp,
  medicine,
  bp,
  temperature,
  dosage,
  frequency,
  patientName,
  patientEmail,
  patientPhone,
  doctorId,
}: {
  userId: string;
  doctorName: string;
  doctorContact: string;
  diagnose: string;
  testRecommended: string;
  timestamp: string;
  medicine: string;
  bp: string;
  temperature: string;
  dosage: string;
  frequency: string;
  patientName: string;
  patientEmail: string;
  patientPhone: string;
  doctorId: string;
}) => {
  const doc = new jsPDF();

  // Logo
    const logoImg = getBase64FromFile("assets/icons/logo-full.png"); // fallback path
    const pageWidth = doc.internal.pageSize.getWidth();
    const imageWidth = 40; // or whatever width you prefer
    const imageX = (pageWidth - imageWidth) / 2;
    doc.addImage(logoImg, "PNG", imageX, 10, imageWidth, 25);

  // Title
  doc.setFont("Helvetica", "bold");
  doc.setFontSize(16);
  doc.text("Medical Prescription", 105, 40, { align: "center" });

  doc.setFontSize(12);
  doc.setFont("Helvetica", "normal");

  // Doctor Info Section
  autoTable(doc, {
    startY: 50,
    head: [["Doctor Information"]],
    body: [
      ["Doctor Name", doctorName || "N/A"],
      ["Doctor Contact", doctorContact || "N/A"],
      ["Doctor ID", doctorId || "N/A" ], // Optional field
    ],
    theme: "grid",
    styles: { fontSize: 11, cellPadding: 3 },
    headStyles: { fillColor: [63, 81, 181], halign: "center", textColor: 255 },
  });

  // Patient Info Section
  autoTable(doc, {
    startY: (doc.lastAutoTable?.finalY ?? 90) + 10,
    head: [["Patient Details"]],
    body: [
      ["User ID", userId],
      ["Patient Name", patientName || "N/A"],
      ["Patient Email", patientEmail || "N/A"],
      ["Patient Phone", patientPhone || "N/A"],
      ["Timestamp", new Date(timestamp).toLocaleString() || "N/A"],
    ],
    theme: "grid",
    styles: { fontSize: 11, cellPadding: 3 },
    headStyles: { fillColor: [63, 81, 181], halign: "center", textColor: 255 },
  });

  // Diagnosis Section
  autoTable(doc, {
    startY: (doc.lastAutoTable?.finalY ?? 90) + 10,
    head: [["Diagnosis"]],
    body: [
      ["Diagnose", diagnose || "N/A"],
      ["Tests Recommended", testRecommended || "None"],
    ],
    theme: "grid",
    styles: { fontSize: 11, cellPadding: 3 },
    headStyles: { fillColor: [76, 175, 80], halign: "center", textColor: 255 },
  });

  // Prescription Section
  autoTable(doc, {
    startY: (doc.lastAutoTable?.finalY??90) + 10,
    head: [["Prescription"]],
    body: [
      ["Medicine", medicine || "N/A"],
      ["Dosage", dosage || "N/A"],
      ["Frequency", frequency || "N/A"],
    ],
    theme: "grid",
    styles: { fontSize: 11, cellPadding: 3 },
    headStyles: { fillColor: [244, 67, 54], halign: "center", textColor: 255 },
  });

  // Vitals Section
  autoTable(doc, {
    startY: (doc.lastAutoTable?.finalY??90) + 10,
    head: [["Vitals"]],
    body: [
      ["Blood Pressure", bp || "N/A"],
      ["Temperature", temperature || "N/A"],
    ],
    theme: "grid",
    styles: { fontSize: 11, cellPadding: 3 },
    headStyles: { fillColor: [33, 150, 243], halign: "center", textColor: 255 },
  });

  // Footer
  doc.setFontSize(10);
  doc.text("Generated by ArogyaCompass", 105, 290, { align: "center" });

  return doc.output("blob");
};


// Helper to convert image to Base64
export function getBase64FromFile(relativePublicPath: string): string {
  const fullPath = path.join(process.cwd(), "public", relativePublicPath); // not path.resolve!
  if (!fs.existsSync(fullPath)) {
    throw new Error(`File not found at: ${fullPath}`);
  }

  const imageBuffer = fs.readFileSync(fullPath);
  return `data:image/png;base64,${imageBuffer.toString("base64")}`;
}
